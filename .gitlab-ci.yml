stages:
  - aws-login
  - docker-ecr
  - kubeconfig
  - kubernetes

variables:
  IMAGE_TAG: $CI_COMMIT_SHA

login:
  stage: aws-login
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
    - aws eks list-clusters

docker:
  stage: docker-ecr
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "DATABASE_URL=\"mysql://$DATABASE_USER:$DATABASE_PASSWORD@$DATABASE_HOST:$DATABASE_PORT/$DATABASE_NAME"\" >> ./app/.env
    - cat ./app/.env
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli --break-system-packages
    - aws --version
    - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REGISTRY
  script:
    # - docker build --pull --rm -f ./app/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG "app"
    - docker image list
    # - docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

kubeconfig:
  stage: kubeconfig
  image: docker:latest
  before_script:
    - apk update
    - apk fetch gnupg
    - apk add gnupg
    - gpg --list-keys
  script:
    - gpg --quiet --batch --yes --decrypt --passphrase="$KUBECONFIG_PASSPHRASE" --output ./app/k8s/kubeconfig ./app/k8s/kubeconfig.gpg
    - cat ./app/k8s/kubeconfig
  artifacts:
    paths:
      - ./app/k8s/kubeconfig

kubectl:
  stage: kubernetes
  image: matshareyourscript/aws-helm-kubectl
  dependencies:
    - kubeconfig
  script:
    - cat ./app/k8s/kubeconfig
    - kubectl --kubeconfig ./app/k8s/kubeconfig version --short
